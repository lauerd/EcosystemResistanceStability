filei <- '10by10.tif'
fileo <- '5by5.tif'
dm = 4
r <- raster(matrix(1:(dm^2), dm, dm))
library(raster)
dm = 4
r <- raster(matrix(1:(dm^2), dm, dm))
writeRaster(r, filename=filei, overwrite = TRUE)
r1 <- aggregate(r, fact=2, fun = mean, na.rm = TRUE)
file.remove(fileo)
cmd <- paste("gdalwarp -r average -tr", paste(res(r1), collapse = " "), filei, fileo)
cmd
tempfile(fileext='.tif')
survivorship_1850_1890 <-c(3, 2.63, 2.57, 2.40, 2.34, 2.20, 1.90, 1.48, 1, 0, 0)
survivorship_1950_1990 <-c(3, 2.98, 2.96, 2.96, 2.95, 2.94, 2.91, 2.82, 2.60, 1.95, 0)
plot(survivorship_1850_1890, col='red', pch=8, xlim=c(1,11), main='', ylab='Survival Rate (Log Lx)', xlab='Lifespan Period (years)', xaxt='n')
plot(survivorship_1950_1990, col='blue', pch=8, xlim=c(1,11), main='', ylab='Survival Rate (Log Lx)
lines(survivorship_1850_1890, col='blue', lwd=2)
plot(survivorship_1850_1890, col='red', pch=8, xlim=c(1,11), main='', ylab='Survival Rate (Log Lx)', xlab='Lifespan Period (years)', xaxt='n')
lines(survivorship_1850_1890, col='red', lwd=2)
plot(survivorship_1950_1990, col='blue', pch=8, xlim=c(1,11), main='',ylab='', xlab='', xaxt='n' , yaxt = 'n')
plot(survivorship_1850_1890, col='red', pch=8, xlim=c(1,11), main='', ylab='Survival Rate (Log Lx)', xlab='Lifespan Period (years)', xaxt='n')
lines(survivorship_1850_1890, col='red', lwd=2)
par(new = T)
plot(survivorship_1950_1990, col='blue', pch=8, xlim=c(1,11), main='',ylab='', xlab='', xaxt='n' , yaxt = 'n')
lines(survivorship_1950_1990, col='blue', lwd=2)
legend('topright', legend=c("1950-1990", "1850-1890"), col=c("blue", "red"), lty=1, cex=1,text.font=1)
axis(side = 1, at=1:11, labels=c('[0-9]','[10-19]', '[20-19]', '[30-39]', '[40-49]', '[50-59]', '[60-69]', '[70-79]', '[80-89]', '[90-99]', '[100-109]'), cex.axis=0.4)
# Simulations of resistance and resilience metrics on random data
library("tidyverse")
nruns <- 5
mean_resilience_metrics <- data.frame( matrix(NA, ncol= 2, nrow = nruns))
View(mean_resilience_metrics)
colnames(mean_resilience_metrics) <- c("mean_resistance", "mean_recovery_rate" )
View(mean_resilience_metrics)
k=1
t <- 1:144
r <- rnorm(length(t))
r
plot(t, r, type = "l")
disturbance <- which(r <= -1)
resilience_metrics <- vector(mode='list', length=length(disturbance))
View(resilience_metrics)
i=1
disturbance_event_time_series <- r[disturbance[i]:length(r)]
recovery_time<- which(disturbance_event_time_series >= 0)[1]
resistance <-  1/r[disturbance[i]]
recovery_rate <- r[disturbance[i]]/recovery_time
resilience_metrics[[i]] <- data.frame( resistance, recovery_rate)
View(resilience_metrics)
nruns <- 500
mean_resilience_metrics <- data.frame( matrix(NA, ncol= 2, nrow = nruns))
colnames(mean_resilience_metrics) <- c("mean_resistance", "mean_recovery_rate" )
for(k in 1: nruns){
t <- 1:144
r <- rnorm(length(t))
#plot(t, r, type = "l")
disturbance <- which(r <= -1)
resilience_metrics <- vector(mode='list', length=length(disturbance))
for(i in 1:length(disturbance)){
disturbance_event_time_series <- r[disturbance[i]:length(r)]
recovery_time<- which(disturbance_event_time_series >= 0)[1]
resistance <-  1/r[disturbance[i]]
recovery_rate <- r[disturbance[i]]/recovery_time
resilience_metrics[[i]] <- data.frame( resistance, recovery_rate)
}
resilience_metrics <- do.call(rbind.data.frame, resilience_metrics)
mean_resilience_metrics[k,] <- data.frame(
mean_resistance = abs(mean(resilience_metrics[,1], na.rm = TRUE)),
mean_recovery_rate = abs(mean(resilience_metrics[,2], na.rm = TRUE)))
}
View(mean_resilience_metrics)
FigureR1 <- mean_resilience_metrics %>%
ggplot(aes(x = mean_resistance, y = mean_recovery_rate)) +
geom_point()+
geom_smooth(method= "lm")+
theme_bw() +
xlab("Resistance (1/ mean anomoly)") +
ylab("Engineering Resilience (Recovery Rate)")
FigureR1
corr <- cor.test(x=mean_resilience_metrics$mean_resistance, y=mean_resilience_metrics$mean_recovery_rate, method = 'spearman')
corr # Spearman's
TrainTest_splitter <- function(Df) { # Create a function that performs this split per dataframe.
# Create a version of "Africa_PAs_centroids" that only contains the centroids/points pertaining to the rows in "Df":
Centroids <- Africa_PAs_centroids[Africa_PAs@data$WDPA_PID %in% Df[, 'Site_ID']]
# Perform the data split and store the results in a list:
# Split <- createDataPartition(Df[, Analysis_response], p = 0.8, list = FALSE, times = 1) # Choose df rows for training.
Split <- spatialBlock(Centroids, theRange = 100000, selection = 'systematic', showBlocks = F, progress = F, verbose = F)
Split <- which(Split$foldID != 5) # Choose df rows for training.
Train <- Df[Split, ]; Test <- Df[-Split, ] # Create the training and testing data subsets.
List <- list(Split, Train, Test) # Create a list of the training subset row indices, as well as both subsets.
names(List) <- c('Split', 'Train', 'Test') # Name the list elements for reference below.
# Plot a map of Africa showing the sites designated for each of the training and testing subsets:
par(mfrow = c(1,1), mar = c(5.1,4.1,4.1,2.1)) # Set plot layout settings.
plot(Africa, col = 'cornsilk1') # Plot Africa.
Colors <- sapply(1:nrow(Df), function(Site) { ifelse(Site %in% Split, 'steelblue3', 'orange4') }) # Site colors.
plot(Centroids, col = Colors, pch = 19, add = TRUE) # Plot the sites, colored by their designation.
map.scale(ratio = FALSE, cex = 1.5) # Plot scale bar.
return(List) } # Return the finalized list made above.
Sites_split <- lapply(Sites, TrainTest_splitter) # Apply the above function to each dataframe in "Sites".
setwd('./Data')
Test <- read.csv('Sites_1km.csv')
View(Test)
Test$Eco_RecoveryRate <- abs(Test$Eco_RecoveryRate)
View(Test)
write.csv(Test, file = 'Sites_1km.csv', row.names = F)
Test <- read.csv('Sites_5km.csv')
Test$Eco_RecoveryRate <- abs(Test$Eco_RecoveryRate)
write.csv(Test, file = 'Sites_5km.csv', row.names = F)
